Instrucciones de Instalación
****************************

Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005 Free
Software Foundation, Inc.

Este fichero es documentación libre; la Free Software Foundation le
otorga permisos ilimitados para copiarlo, distribuirlo y modificarlo.

Instalación básica
==================

Estas son las instrucciones geneŕicas de instalación

   El shell script `configure' intenta usar los valores correctos para
las variables usadas en tiempo de compilación dependientes del sistema.
Se usan estos valores para crear un fichero `Makefile' en cada directorio
del paquete. También se pueden crear uno o más ficheros `.h' que contienen
definiciones dependientes del sistema. Finalmente, se crea un shell script
`config.status' que se puede ejecutar posteriormente para recrear la 
configuración establecida, y un fichero `config.log' que contiene la salida
del compilado (esto es útil para depurar el `configure').

   También puede usarse con un fichero opcional (llamado habitualmente
`config.cache' y habilitarlo con `--cache-file=config.cache' o simplemente
`-C' que guarda los resultados de los tests para acelerar la reconfiguración.
(El cacheo está deshabilitado por defecto para prevenir problemas con el uso
de ficheros de caché obsoletos.)

   Si se necesita realizar algo inusual para compilar el paquete, por favor
intente averiguar cómo hacerlo, y envíe por mail los diffs o las instrucciones
pertinentes de tal forma que podamos chequearlo y tenerlo en cuenta para
futuras versiones. Si está usando la caché y en algún punto el fichero
`config.cache' contiene resultados que no se quieren mantener, debería
eliminarlo o editarlo.

   El fichero `configure.ac' (o `configure.in') se usa para crear `configure'
mediante un programa que se llama `autoconf'. Sólo se necesita `configure.ac'
si se quiere cambiar o regenerar `configure' usando una nueva versión de
`autoconf'.

La forma más sencilla de compilar el paquete es la siguiente:

  1. `cd' al directorio que contiene el código fuente del paquete y ejecutar
     `./configure' para configurar el paquete de acuerdo a su sistema. Si está
     usando `csh' sobre una vieja versión de System V, debería ejecutar
     `sh ./configure' para prevenir problemas.

     La ejecución de `configure' lleva un momento. Mientras está en ejecución
     se visualizan los mensajes correspondientes a las características que se
     están chequeando.

  2. Ejecute `make' para compilar el paquete.

  3. Opcionalmente, ejecute `make check' para ejecutar los auto-tests que
     vienen con el paquete.

  4. Escriba `make install' para instalar los programas, ficheros de datos y
     documentación.

  5. Puede eliminar los binarios y los ficheros objeto del directorio de 
     código fuente ejecutando `make clean'. También puede eliminar los
     ficheros que `configure' haya creado (de tal forma que pueda compilar
     los paquetes en otro equipo), ejecute `make distclean'. También hay 
     un objetivo `make maintainer-clean', que está pensado para su uso por
     los desarrolladores. Si lo usa, puede que tenga que obtener otros
     programas con el fin de regenerar los archivos que vienen con la 
     distribución.	 

Compiladores y Opciones
=======================

   Algunos sistemas requieren opciones para la compilación o enlazado
no usuales que el script `configure' no gestiona automáticamente.
Ejecute `./configure --help' para detalles sobre las variables de
entorno necesarias.

   Puede dar valores iniciales a los parámetros de configuración,
ajustando las variables en línea de comandos o en el entorno. Puede
ver a continuación un ejemplo:

     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix

Compilando Para Múltiples Arquitecturas
=======================================

   Se puede compilar el paquete para más de un tipo de ordenador
al mismo tiempo, colocando los objetos para cada arquitectura en su
propio directorio. Para hacer esto, debe usar una versión de `make'
que soporte la variable `VPATH', por ejemplo el GNU `make'. `cd' al
directorio en el que quiere los ficheros objeto y ejecutables y
ejecute el script `configure'. Automáticamente se chequea el código
fuente en el directorio en el que `configure' está y en `..'.

   Si tiene que usar un `make' que no soporta la variable `VPATH',
tendrá que compilar el paquete para cada arquitectura cada vez en el
directorio del código fuente. Después de que haya instalado el paquete
para cada arquitectura, deberá ejecutar `make distclean' antes de
reconfigurarlo para otra arquitectura.

Nombres de Instalación
======================

   Por defecto, `make install' instala los ejecutables del paquete
en `/usr/local/bin', los ficheros include en `/usr/local/include', etc.
Se puede especificar otro prefijo de instalación diferente a `/usr/local'
pasando la opción `--prefix=PREFIX' a `configure'

   Se pueden especificar prefijos de instalación separados para ficheros
dependientes e independientes de la arquitectura. Si pasamos la opción
`--exec-prefix=PREFIX' a `configure', el paquete usa PREFIX como el 
prefijo para la instalación de binarios y librerías. La documentación
y otros ficheros de datos seguirán usando el prefijo estándar.

   Si se quiere utilizar una estructura no habitual de directorios
podemos usar opciones como `--bindir=DIR' para especificar diferentes
valores para clases concretas de ficheros. Ejecute `configure --help'
para ver una lista de los directorios que se pueden especificary qué
clase de archivos pueden contener. 

   Pasando la opción `--program-prefix=PREFIX' o `--program-suffix=SUFFIX'
conseguirá que los binarios sean instalados con un prefijoo sufijo  extra
en sus nombres.

Características Opcionales
==========================

Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Especificando el Tipo de Sistema
================================

There may be some features `configure' cannot figure out automatically,
but needs to determine by the type of machine the package will run on.
Usually, assuming the package is built to be run on the _same_
architectures, `configure' can figure that out, but if it prints a
message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the option `--target=TYPE' to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Valores por Defecto
===================

If you want to set default values for `configure' scripts to share, you
can create a site shell script called `config.site' that gives default
values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Definición de Variables
=======================

Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

causes the specified `gcc' to be used as the C compiler (unless it is
overridden in the site shell script).  Here is a another example:

     /bin/bash ./configure CONFIG_SHELL=/bin/bash

Here the `CONFIG_SHELL=/bin/bash' operand causes subsequent
configuration-related scripts to be executed by `/bin/bash'.

Opciones de `configure'
======================

`configure' recognizes the following options to control how it operates.

`--help'
`-h'
     Print a summary of the options to `configure', and exit.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.
